{"version":3,"sources":["views/Pools/components/ToggleView/ToggleView.tsx","state/pools/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/hooks/useApprove.ts","views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/PercentageButton.tsx","views/Pools/hooks/useStakePool.ts","views/Pools/hooks/useUnstakePool.ts","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/hooks/useHarvestPool.ts","views/Pools/components/PoolCard/Modals/CollectModal.tsx","views/Pools/components/PoolCard/CardActions/HarvestActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/PoolCard/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","views/Pools/hooks/useWithdrawalFeeTimer.ts","utils/getTimePeriods.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolTabButtons.tsx","views/Pools/components/BountyModal.tsx","views/Pools/components/BountyCard.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Apr.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Harvest.tsx","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx"],"names":["ViewMode","useCakeVault","useSelector","state","pools","cakeVault","totalSharesAsString","totalShares","pricePerFullShareAsString","pricePerFullShare","totalCakeInVaultAsString","totalCakeInVault","estimatedCakeBountyRewardAsString","estimatedCakeBountyReward","totalPendingCakeHarvestAsString","totalPendingCakeHarvest","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userSharesAsString","userShares","cakeAtLastUserActionAsString","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","useMemo","BigNumber","AprRow","pool","t","useTranslation","stakingToken","earningToken","isFinished","apr","earningTokenPrice","isAutoVault","tooltipContent","useTooltip","placement","targetRef","tooltip","tooltipVisible","getAprData","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","useModal","ApyCalculatorModal","tokenPrice","linkLabel","symbol","linkHref","earningTokenSymbol","onPresentApyModal","alignItems","justifyContent","ref","width","height","Balance","fontSize","isDisabled","value","decimals","unit","bold","onClick","variant","scale","color","StyledCard","styled","Card","theme","colors","mediaQueries","sm","ExpandedWrapper","Flex","ExpandedFooter","account","currentBlock","useBlock","totalStaked","startBlock","endBlock","stakingLimit","contractAddress","sousId","tokenAddress","address","getAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","getPoolBlockInfo","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","flexDirection","mb","small","gte","getBalanceNumber","manualCakeTotalMinusAutoVault","minus","getTotalStakedBalance","ml","mt","gt","getFullDisplayBalance","external","href","getBscScanLink","textTransform","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","CardFooterWrapper","CardFooter","input","Footer","useState","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","CakeVaultTokenPairImage","props","primaryTokenSrc","tokens","sphynx","primarySrc","secondarySrc","Wrapper","CardHeader","background","backgroundDisabled","gradients","radii","card","StyledCardHeader","isStaking","isCakePool","primaryToken","secondaryToken","useApprovePool","lpContract","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","useWeb3React","sousChefContract","useSousChef","handleApprove","useCallback","a","approve","ethers","constants","MaxUint256","tx","wait","receipt","updateUserAllowance","status","console","error","useVaultApprove","setLastUpdated","cakeVaultContract","useCakeVaultContract","cakeContract","useCake","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","useEffect","allowance","response","currentAllowance","toString","checkApprovalStatus","ApprovalAction","stakingTokenContract","useERC20","endIcon","spin","disabled","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","headerBackground","cardHeader","as","StyledButton","Button","PercentageButton","children","mx","options","gasLimit","DEFAULT_GAS_LIMIT","sousStake","amount","deposit","times","BIG_TEN","pow","sousStakeBnb","DEFAULT_TOKEN_DECIMAL","useStakePool","isUsingBnb","masterChefContract","useMasterchef","handleStake","stakeFarm","updateUserStakedBalance","updateUserBalance","onStake","sousUnstake","withdraw","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","enableEmergencyWithdraw","handleUnstake","unstakeFarm","updateUserPendingReward","onUnstake","StakeModal","isBnbPool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","getCalculatedStakingLimit","stakedBalance","usdValueStaked","formatNumber","toNumber","fullDecimalStakeAmount","getDecimalAmount","plus","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleConfirmClick","style","textAlign","token","minWidth","src","alt","onUserInput","convertedInput","percentage","Math","floor","min","currencyValue","isWarning","balance","max","onValueChanged","name","valueLabel","step","parseFloat","StakeAction","isStaked","stakedTokenBalance","stakedTokenDollarBalance","onPresentTokenRequired","onPresentStake","onPresentUnstake","reachStakingLimit","prefix","mr","harvestPool","harvestPoolBnb","BIG_ZERO","useHarvestPool","handleHarvest","harvestFarm","onReward","CollectModal","formattedBalance","fullBalance","earningsDollarValue","isCompoundPool","shouldCompound","setShouldCompound","tooltipOffset","handleHarvestConfirm","activeIndex","onItemClick","index","pb","HarvestActions","earnings","earningTokenBalance","earningTokenDollarBalance","hasEarnings","onPresentCollect","display","InlineText","Text","CardActions","harvest","poolCategory","PoolCategory","BINANCE","pendingReward","needsApproval","StakeActions","StyledCardBody","CardBody","PoolCard","accountHasStakedBalance","ribbon","variantColor","text","ConnectWalletButton","VaultApprovalAction","useWithdrawalFeeTimer","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","abs","timeLeft","years","months","days","hours","minutes","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","feeAsDecimal","fee","parseInt","noFeeToPay","shouldShowTimer","toLowerCase","FeeSummary","stakingTokenSymbol","feeInCake","toFixed","callOptions","VaultStakeModal","stakingMax","cakePriceBusd","usePriceCakeBusd","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","withdrawAll","fetchCakeVaultUserData","handleDeposit","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","VaultStakeActions","accountHasSharesStaked","CakeVaultCardActions","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","toLocaleString","CakeVaultCard","showStakedOnly","isVaultUserDataLoading","performanceFeeAsDecimal","isActive","RecentCakeProfitRow","VaultCardActions","Container","div","ToggleView","viewMode","onToggle","handleToggle","mode","id","CARD","TABLE","ToggleWrapper","ViewControls","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","setViewMode","useRouteMatch","url","isExact","viewModeToggle","liveOrFinishedSwitch","to","show","stakedOnlySwitch","checked","onChange","Divider","BountyModal","TooltipComponent","callFeeAsDecimal","totalYieldToDisplay","estimatedDollarBountyReward","hasFetchedDollarBounty","hasFetchedCakeBounty","dollarBountyToDisplay","cakeBountyToDisplay","tooltipPadding","right","BountyCard","fontWeight","onPresentBountyModal","BaseCell","CellContent","StyledCell","NameCell","useMatchBreakpoints","isXs","isSm","hasVaultShares","showStakedTag","subtitle","showSubtitle","toLocaleLowerCase","role","HelpIconWrapper","EarningsCell","userDataLoaded","labelText","asset","event","stopPropagation","undefined","Apr","showIcon","openRoiModal","padding","marginLeft","md","AprCell","TotalStakedCell","totalStakedBalance","EndsInCell","renderBlocks","flex","e","showLoading","ArrowIcon","ChevronDownIcon","toggled","isFullLayout","ActionContainer","xl","ActionTitles","ActionContent","HarvestAction","actionTitle","pt","alignSelf","lineHeight","marginTop","IconButtonWrapper","Staked","handlePoolApprove","requestedPoolApproval","handleVaultApprove","requestedVaultApproval","isNotVaultAndHasStake","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","onPresentVaultStake","onPresentVaultUnstake","expandAnimation","keyframes","collapseAnimation","StyledActionPanel","css","lg","InfoSection","Box","ActionPanel","breakpoints","isMd","tagTargetRef","tagTooltip","tagTooltipVisible","maxStakeRow","blocksRow","aprRow","totalStakedRow","maxWidth","Harvest","Stake","StyledRow","PoolRow","isLg","isXl","setExpanded","shouldRenderActionPanel","useDelayedUnmount","prev","ExpandActionCell","StyledTable","StyledTableBorder","ScrollButtonContainer","PoolsTable","tableWrapperEl","useRef","map","current","scrollIntoView","behavior","CardLayout","FlexLayout","PoolControls","FilterContainer","LabelWrapper","ControlStretch","Pools","location","useLocation","fastRefresh","useRefresh","fetchPoolsUserDataAsync","data","transformPool","usePools","poolsWithoutAutoVault","usePersistState","localStorageKey","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","searchQuery","setSearchQuery","sortOption","setSortOption","chosenPoolsLength","accountHasVaultShares","cakePool","find","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","isGreaterThan","stakedOnlyOpenPools","length","usePollFarmsData","fetchCakeVaultPublicData","fetchCakeVaultFees","useFetchCakeVault","slowRefresh","simpleRpcProvider","getBlockNumber","blockNumber","fetchPoolsPublicDataAsync","fetchPoolsPublicData","fetchPoolsStakingLimitsAsync","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","chosenPools","showFinishedPools","pathname","includes","lowercaseQuery","latinise","poolsToSort","orderBy","sortPools","slice","cardLayout","tableLayout","PageHeader","Page","Select","label","option","SearchInput","target","placeholder","Loading"],"mappings":"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","file":"static/js/10.29f843c0.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from 'hooks/useRefresh'\nimport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  fetchPoolsStakingLimitsAsync,\n} from '.'\nimport { State, Pool } from '../types'\nimport { transformPool } from './helpers'\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\n    }\n\n    fetchPoolsPublicData()\n    dispatch(fetchPoolsStakingLimitsAsync())\n  }, [dispatch, slowRefresh])\n}\n\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  return { pools: pools.map(transformPool), userDataLoaded }\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.pools.cakeVault)\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString)\n  }, [totalPendingCakeHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString)\n  }, [totalCakeInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString)\n  }, [cakeAtLastUserActionAsString])\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { getAprData } from 'views/Pools/helpers'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink = '/swap'\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import styled from 'styled-components'\nimport { Card } from '@pancakeswap/uikit'\n\nexport const StyledCard = styled(Card)<{ isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport default StyledCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL } from 'config'\nimport { useBlock } from 'state/block/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanLink } from 'utils'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('See Token Info')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst CardFooterWrapper = styled(CardFooter)`\n  background-color: ${({theme}) => theme.colors.input}\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooterWrapper>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooterWrapper>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.sphynx.address)}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React from 'react'\nimport { CardHeader, Heading, Text, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'SPHYNX' && stakingToken.symbol === 'SPHYNX'\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t('Earn SPHYNX, stake SPHYNX')\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n            {`${getHeadingPrefix()} ${earningToken.symbol}`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers, Contract } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useSousChef, useCakeVaultContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await lpContract.approve(sousChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n\n      dispatch(updateUserAllowance(sousId, account))\n      if (receipt.status) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = async () => {\n    const tx = await cakeContract.approve(cakeVaultContract.address, ethers.constants.MaxUint256)\n    setRequestedApproval(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n      setLastUpdated()\n      setRequestedApproval(false)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setRequestedApproval(false)\n    }\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.allowance(account, cakeVaultContract.address)\n        const currentAllowance = new BigNumber(response.toString())\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\nimport { useApprovePool } from '../../../hooks/useApprove'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove, requestedApproval } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href=\"/swap\">\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap/uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stakeFarm } from 'utils/calls'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst sousStakeBnb = async (sousChefContract, amount) => {\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stakeFarm(masterChefContract, 0, amount)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount)\n      } else {\n        await sousStake(sousChefContract, amount, decimals)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakePool\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport { BIG_TEN } from 'utils/bigNumber'\n\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\n  const tx = await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst sousEmergencyUnstake = async (sousChefContract) => {\n  const tx = await sousChefContract.emergencyWithdraw()\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await unstakeFarm(masterChefContract, 0, amount)\n      } else if (enableEmergencyWithdraw) {\n        await sousEmergencyUnstake(sousChefContract)\n      } else {\n        await sousUnstake(sousChefContract, amount, decimals)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakePool\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\nimport useStakePool from '../../../hooks/useStakePool'\nimport useUnstakePool from '../../../hooks/useUnstakePool'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit}\n        decimals={stakingToken.decimals}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', {\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n        })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n      </Flex>\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href=\"/swap\">\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            {stakingTokenPrice !== 0 && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={stakedTokenDollarBalance}\n                  prefix=\"~\"\n                  unit=\" USD\"\n                />\n              </Text>\n            )}\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          {reachStakingLimit ? (\n            <span ref={targetRef}>\n              <IconButton variant=\"secondary\" disabled>\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton\n              variant=\"secondary\"\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n              disabled={isFinished}\n            >\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n            </IconButton>\n          )}\n        </Flex>\n        {tooltipVisible && tooltip}\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { harvestFarm } from 'utils/calls'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport { DEFAULT_GAS_LIMIT } from 'config'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst harvestPool = async (sousChefContract) => {\n  const tx = await sousChefContract.deposit('0', options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst harvestPoolBnb = async (sousChefContract) => {\n  const tx = await sousChefContract.deposit({ ...options, value: BIG_ZERO })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvestFarm(masterChefContract, 0)\n    } else if (isUsingBnb) {\n      await harvestPoolBnb(sousChefContract)\n    } else {\n      await harvestPool(sousChefContract)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestPool\n","import React, { useState } from 'react'\nimport {\n  Modal,\n  Text,\n  Button,\n  Heading,\n  Flex,\n  AutoRenewIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { Token } from 'config/constants/types'\nimport { formatNumber } from 'utils/formatBalance'\nimport useHarvestPool from '../../../hooks/useHarvestPool'\nimport useStakePool from '../../../hooks/useStakePool'\n\ninterface CollectModalProps {\n  formattedBalance: string\n  fullBalance: string\n  earningToken: Token\n  earningsDollarValue: number\n  sousId: number\n  isBnbPool: boolean\n  isCompoundPool?: boolean\n  onDismiss?: () => void\n}\n\nconst CollectModal: React.FC<CollectModalProps> = ({\n  formattedBalance,\n  fullBalance,\n  earningToken,\n  earningsDollarValue,\n  sousId,\n  isBnbPool,\n  isCompoundPool = false,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useHarvestPool(sousId, isBnbPool)\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text mb=\"12px\">{t('Compound: collect and restake CAKE into pool.')}</Text>\n      <Text>{t('Harvest: collect CAKE and send to wallet')}</Text>\n    </>,\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // compounding\n    if (shouldCompound) {\n      try {\n        await onStake(fullBalance, earningToken.decimals)\n        toastSuccess(\n          `${t('Compounded')}!`,\n          t('Your %symbol% earnings have been re-invested into the pool!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        console.error(e)\n        setPendingTx(false)\n      }\n    } else {\n      // harvesting\n      try {\n        await onReward()\n        toastSuccess(\n          `${t('Harvested')}!`,\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        console.error(e)\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={`${earningToken.symbol} ${isCompoundPool ? t('Collect') : t('Harvest')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {isCompoundPool && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\n          <ButtonMenu\n            activeIndex={shouldCompound ? 0 : 1}\n            scale=\"sm\"\n            variant=\"subtle\"\n            onItemClick={(index) => setShouldCompound(!index)}\n          >\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\n          </ButtonMenu>\n          <Flex ml=\"10px\" ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </Flex>\n          {tooltipVisible && tooltip}\n        </Flex>\n      )}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\n        <Flex flexDirection=\"column\">\n          <Heading>\n            {formattedBalance} {earningToken.symbol}\n          </Heading>\n          {earningsDollarValue > 0 && (\n            <Text fontSize=\"12px\" color=\"textSubtle\">{`~${formatNumber(earningsDollarValue)} USD`}</Text>\n          )}\n        </Flex>\n      </Flex>\n\n      <Button\n        mt=\"8px\"\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default CollectModal\n","import React from 'react'\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  earningTokenPrice: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  earningTokenPrice,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const hasEarnings = earnings.toNumber() > 0\n  const isCompoundPool = sousId === 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n      <Flex flexDirection=\"column\">\n        {isLoading ? (\n          <Skeleton width=\"80px\" height=\"48px\" />\n        ) : (\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        )}\n      </Flex>\n      <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n        {isCompoundPool ? t('Collect') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${earningToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {t('Earned')}\n              </InlineText>\n            </Box>\n            <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            />\n          </>\n        )}\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} />\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport React from 'react'\nimport { CardBody, Flex, Text, CardRibbon } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport AprRow from './AprRow'\nimport { StyledCard } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\n\nconst StyledCardBody = styled(CardBody)`\n  background-color: ${({theme}) => theme.colors.input}\n`\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n\n  return (\n    <StyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n    >\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <StyledCardBody>\n        <AprRow pool={pool} />\n        <Flex mt=\"24px\" flexDirection=\"column\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <ConnectWalletButton />\n            </>\n          )}\n        </Flex>\n      </StyledCardBody>\n      <CardFooter pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from '../../../hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/pools/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new SPHYNX in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/pools/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new SPHYNX in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst callOptions = {\n  gasLimit: 380000,\n}\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      try {\n        const tx = await cakeVaultContract.withdrawAll(callOptions)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    } else {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      try {\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    try {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setPendingTx(false)\n    }\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal(convertedStakeAmount)\n    } else {\n      // staking\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href=\"/swap\" variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent SPHYNX profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n  background-color: ${({theme}) => theme.colors.input}\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isActive>\n      <StyledCardHeader\n        isStaking={accountHasSharesStaked}\n        isAutoVault\n        earningToken={tokens.sphynx}\n        stakingToken={tokens.sphynx}\n      />\n      <StyledCardBody isLoading={isLoading}>\n        <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n        <Box mt=\"24px\">\n          <RecentCakeProfitRow />\n        </Box>\n        <Box mt=\"8px\">\n          <UnstakingFeeCountdownRow />\n        </Box>\n        <Flex mt=\"32px\" flexDirection=\"column\">\n          {account ? (\n            <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <ConnectWalletButton />\n            </>\n          )}\n        </Flex>\n      </StyledCardBody>\n      <CardFooter pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import React from 'react'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\n  const { url, isExact } = useRouteMatch()\n  const { t } = useTranslation()\n\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n\n  const liveOrFinishedSwitch = (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedPools}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n\n  const stakedOnlySwitch = (\n    <ToggleWrapper>\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n      <Text> {t('Staked only')}</Text>\n    </ToggleWrapper>\n  )\n\n  return (\n    <ViewControls>\n      {viewModeToggle}\n      {stakedOnlySwitch}\n      {liveOrFinishedSwitch}\n    </ViewControls>\n  )\n}\n\nexport default PoolTabButtons\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\n\ninterface BountyModalProps {\n  onDismiss?: () => void\n  TooltipComponent: React.ElementType\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\n\nconst BountyModal: React.FC<BountyModalProps> = ({ onDismiss, TooltipComponent }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { theme } = useTheme()\n  const { toastError, toastSuccess } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const [pendingTx, setPendingTx] = useState(false)\n  const {\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: { callFee },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const callFeeAsDecimal = callFee / 100\n  const totalYieldToDisplay = getBalanceNumber(totalPendingCakeHarvest, 18)\n\n  const estimatedDollarBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\n  }, [cakePriceBusd, estimatedCakeBountyReward])\n\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={callFee} />, {\n    placement: 'bottom',\n    tooltipPadding: { right: 15 },\n  })\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n    try {\n      const tx = await cakeVaultContract.harvest({ gasLimit: 300000 })\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(t('Bounty collected!'), t('SPHYNX bounty has been sent to your wallet.'))\n        setPendingTx(false)\n        onDismiss()\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal title={t('Claim Bounty')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      {tooltipVisible && tooltip}\n      <Flex alignItems=\"flex-start\" justifyContent=\"space-between\">\n        <Text>{t('You’ll claim')}</Text>\n        <Flex flexDirection=\"column\">\n          <Balance bold value={cakeBountyToDisplay} decimals={7} unit=\" SPHYNX\" />\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            <Balance\n              fontSize=\"12px\"\n              color=\"textSubtle\"\n              value={dollarBountyToDisplay}\n              decimals={2}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Text>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {t('Pool total pending yield')}\n        </Text>\n        <Balance color=\"textSubtle\" value={totalYieldToDisplay} unit=\" SPHYNX\" />\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {t('Bounty')}\n        </Text>\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {callFeeAsDecimal}%\n        </Text>\n      </Flex>\n      {account ? (\n        <Button\n          isLoading={pendingTx}\n          disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleConfirmClick}\n          mb=\"28px\"\n          id=\"autoCakeConfirmBounty\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      ) : (\n        <ConnectWalletButton mb=\"28px\" />\n      )}\n      <Flex justifyContent=\"center\" alignItems=\"center\">\n        <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\n          {t('What’s this?')}\n        </Text>\n        <span ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </span>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default BountyModal\n","import React, { useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Text,\n  Flex,\n  HelpIcon,\n  Button,\n  Heading,\n  Skeleton,\n  useModal,\n  Box,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport Balance from 'components/Balance'\nimport BountyModal from './BountyModal'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  flex: 1;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 240px;\n  }\n`\n\nconst BountyCard = () => {\n  const { t } = useTranslation()\n  const {\n    estimatedCakeBountyReward,\n    fees: { callFee },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n\n  const estimatedDollarBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\n  }, [cakePriceBusd, estimatedCakeBountyReward])\n\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\n\n  const TooltipComponent = ({ fee }: { fee: number }) => (\n    <>\n      <Text mb=\"16px\">{t('This bounty is given as a reward for providing a service to other users.')}</Text>\n      <Text mb=\"16px\">\n        {t(\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto SPHYNX Pool’s compounding function for everyone.',\n        )}\n      </Text>\n      <Text style={{ fontWeight: 'bold' }}>\n        {t('Auto-Compound Bounty: %fee%% of all Auto SPHYNX pool users pending yield', { fee: fee / 100 })}\n      </Text>\n    </>\n  )\n\n  const [onPresentBountyModal] = useModal(<BountyModal TooltipComponent={TooltipComponent} />)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={callFee} />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <StyledCard>\n        <CardBody>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb=\"12px\">\n              <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\n                {t('Auto SPHYNX Bounty')}\n              </Text>\n              <Box ref={targetRef}>\n                <HelpIcon color=\"textSubtle\" />\n              </Box>\n            </Flex>\n          </Flex>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Flex flexDirection=\"column\" mr=\"12px\">\n              <Heading>\n                {hasFetchedCakeBounty ? (\n                  <Balance fontSize=\"20px\" bold value={cakeBountyToDisplay} decimals={3} />\n                ) : (\n                  <Skeleton height={20} width={96} mb=\"2px\" />\n                )}\n              </Heading>\n              {hasFetchedDollarBounty ? (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  value={dollarBountyToDisplay}\n                  decimals={2}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              ) : (\n                <Skeleton height={16} width={62} />\n              )}\n            </Flex>\n            <Button\n              variant='primary'\n              disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\n              onClick={onPresentBountyModal}\n              scale=\"sm\"\n              id=\"clickClaimVaultBounty\"\n            >\n              {t('Claim')}\n            </Button>\n          </Flex>\n        </CardBody>\n      </StyledCard>\n    </>\n  )\n}\n\nexport default BountyCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { TokenPairImage } from 'components/TokenImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto SPHYNX')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual SPHYNX')\n    subtitle = `${t('Earn')} SPHYNX ${t('Stake').toLocaleLowerCase()} SPHYNX`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto SPHYNX vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto SPHYNX vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent SPHYNX profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" SPHYNX\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport { Flex, useModal, CalculateIcon, Skeleton, FlexProps, Button } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAprData } from 'views/Pools/helpers'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface AprProps extends FlexProps {\n  pool: Pool\n  showIcon: boolean\n  performanceFee?: number\n}\n\nconst Apr: React.FC<AprProps> = ({ pool, showIcon, performanceFee = 0, ...props }) => {\n  const { stakingToken, earningToken, isFinished, earningTokenPrice, apr } = pool\n  const { t } = useTranslation()\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink = '/swap'\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  const openRoiModal = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {earningsPercentageToDisplay || isFinished ? (\n        <>\n          <Balance\n            onClick={openRoiModal}\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={isFinished ? 0 : earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n          />\n          {!isFinished && showIcon && (\n            <Button onClick={openRoiModal} variant=\"text\" width=\"20px\" height=\"20px\" padding=\"0px\" marginLeft=\"4px\">\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n            </Button>\n          )}\n        </>\n      ) : (\n        <Skeleton width=\"80px\" height=\"16px\" />\n      )}\n    </Flex>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr pool={pool} performanceFee={isAutoVault ? performanceFee : 0} showIcon={!isXs && !isSm} />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"20px\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/block/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"white\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"white\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport { Button, Text, useModal, Flex, TooltipText, useTooltip, Skeleton, Heading } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { PoolCategory } from 'config/constants/types'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\nimport UnstakingFeeCountdownRow from '../../CakeVaultCard/UnstakingFeeCountdownRow'\n\ninterface HarvestActionProps extends Pool {\n  userDataLoaded: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\n  sousId,\n  poolCategory,\n  earningToken,\n  userData,\n  userDataLoaded,\n  isAutoVault,\n  earningTokenPrice,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto SPHYNX vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isCompoundPool = sousId === 0\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto SPHYNX vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    pricePerFullShare,\n    fees: { performanceFee },\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const actionTitle = isAutoVault ? (\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n      {t('Recent SPHYNX profit')}\n    </Text>\n  ) : (\n    <>\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n        {earningToken.symbol}{' '}\n      </Text>\n      <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n        {t('Earned')}\n      </Text>\n    </>\n  )\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Heading>0</Heading>\n          <Button disabled>{isCompoundPool ? t('Collect') : t('Harvest')}</Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n        {isAutoVault ? (\n          <Flex flex=\"1.3\" flexDirection=\"column\" alignSelf=\"flex-start\" alignItems=\"flex-start\">\n            <UnstakingFeeCountdownRow isTableVariant />\n            <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n              {tooltipVisible && tooltip}\n              <TooltipText ref={targetRef} small>\n                {t('Performance Fee')}\n              </TooltipText>\n              <Flex alignItems=\"center\">\n                <Text ml=\"4px\" small>\n                  {performanceFee / 100}%\n                </Text>\n              </Flex>\n            </Flex>\n          </Flex>\n        ) : (\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            {isCompoundPool ? t('Collect') : t('Harvest')}\n          </Button>\n        )}\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useApprovePool(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL } from 'config'\nimport { getBscScanLink } from 'utils'\nimport { useBlock } from 'state/block/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"4px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('See Token Info')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} SPHYNX ${t('Stake').toLocaleLowerCase()} SPHYNX`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/pools/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.colors.input};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  background-color: ${({ theme }) => theme.colors.input};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop} style={{ color: 'white' }}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"white\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFetchPublicPoolsData, usePools, useFetchCakeVault, useCakeVault } from 'state/pools/hooks'\nimport { usePollFarmsData } from 'state/farms/hooks'\nimport { latinise } from 'utils/latinise'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport Loading from 'components/Loading'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`\n\nconst PoolControls = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_pool_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenPoolsLength = useRef(0)\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n    return [cakeAutoVault, ...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\n          if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\n            return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE\n          }\n          return poolsCurrentlyVisible\n        })\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  let chosenPools\n  if (showFinishedPools) {\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n  } else {\n    chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n  }\n\n  if (searchQuery) {\n    const lowercaseQuery = latinise(searchQuery.toLowerCase())\n    chosenPools = chosenPools.filter((pool) =>\n      latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n    )\n  }\n\n  chosenPools = sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  chosenPoolsLength.current = chosenPools.length\n\n  const cardLayout = (\n    <CardLayout>\n      {chosenPools.map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={chosenPools} account={account} userDataLoaded={userDataLoaded} />\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"white\" mb=\"24px\">\n              {t('Sphynx Pools')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('Just stake some tokens to earn.')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading>\n          </Flex>\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\n            {/* <HelpButton /> */}\n            <BountyCard />\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolControls>\n          <PoolTabButtons\n            stakedOnly={stakedOnly}\n            setStakedOnly={setStakedOnly}\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\n            viewMode={viewMode}\n            setViewMode={setViewMode}\n          />\n          <FilterContainer>\n            <LabelWrapper>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Sort by')}\n              </Text>\n              <ControlStretch>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APR'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Total staked'),\n                      value: 'totalStaked',\n                    },\n                  ]}\n                  onChange={handleSortOptionChange}\n                />\n              </ControlStretch>\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Search')}\n              </Text>\n              <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </PoolControls>\n        {showFinishedPools && (\n          <Text fontSize=\"20px\" color=\"failure\" pb=\"32px\">\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n          </Text>\n        )}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\" mb=\"4px\">\n            <Loading />\n          </Flex>\n        )}\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\n        <div ref={loadMoreRef} />\n        {/* <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"],"sourceRoot":""}