{"version":3,"sources":["views/RemoveLiquidity/index.tsx"],"names":["BorderCard","styled","div","theme","colors","cardBorder","RemoveLiquidity","history","match","params","currencyIdA","currencyIdB","currencyA","useCurrency","undefined","currencyB","useActiveWeb3React","account","chainId","library","routerType","useSetRouterType","useMemo","wrappedCurrency","tokenA","tokenB","t","useTranslation","useBurnState","independentField","typedValue","useDerivedBurnInfo","pair","parsedAmounts","error","_onUserInput","useBurnActionHandlers","onUserInput","isValid","useState","showDetailed","setShowDetailed","attemptingTxn","setAttemptingTxn","txHash","setTxHash","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","formattedAmounts","Field","LIQUIDITY_PERCENT","equalTo","lessThan","Percent","toFixed","LIQUIDITY","toSignificant","CURRENCY_A","CURRENCY_B","atMaxAmount","pairContract","usePairContract","liquidityToken","address","routerAddress","useRouterAddress","signatureData","setSignatureData","useApproveCallback","approval","approveCallback","a","Error","liquidityAmount","nonces","nonce","EIP712Domain","name","type","domain","version","verifyingContract","Permit","message","owner","spender","value","raw","toString","toHexString","toNumber","data","JSON","stringify","types","primaryType","send","then","splitSignature","signature","v","r","s","catch","err","code","useCallback","field","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","addTransaction","useTransactionAdder","onRemove","currencyAmountA","currencyAmountB","router","getRouterContract","calculateSlippageAmount","amountsMin","currencyBIsETH","ETHER","oneCurrencyIsETH","ApprovalState","APPROVED","methodNames","args","Promise","all","map","methodName","estimateGas","calculateGasMargin","console","safeGasEstimates","indexOfSuccessfulEstimation","findIndex","safeGasEstimate","BigNumber","isBigNumber","gasLimit","response","summary","symbol","hash","modalHeader","gap","align","fontSize","currency","size","ml","width","small","textAlign","pt","slippage","modalBottom","assetA","assetB","currency0","currency1","margin","priceOf","disabled","onClick","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","useDebouncedChangeHandler","Number","parseInt","innerLiquidityPercentage","setInnerLiquidityPercentage","useModal","title","customOnDismiss","content","topContent","bottomContent","onPresentRemoveLiquidity","backTo","subtitle","noConfig","variant","scale","bold","mb","style","lineHeight","min","max","onValueChanged","Math","ceil","flexWrap","justifyContent","color","my","textTransform","id","to","onMax","showMaxButton","disableCurrencySelect","onCurrencySelect","hideBalance","label","marginTop","position","mt","NOT_APPROVED","mr","PENDING","minWidth","maxWidth","showUnwrapped"],"mappings":"kgBAyCMA,EAAaC,IAAOC,IAAV,gGACM,qBAAGC,MAAkBC,OAAOC,cAKnC,SAASC,EAAT,GAKwD,IAAD,2CAJpEC,GAIoE,EAJpEA,QAIoE,KAHpEC,MACEC,OAAUC,GAEwD,GAFxDA,YAAaC,GAE2C,GAF3CA,YAGlBC,GAAP,UAAgCC,YAAYH,WAA5C,aAA4DI,EAA1CC,GAAlB,UAAuEF,YAAYF,WAAnF,aAAmGG,EACnG,GAAsCE,cAA9BC,GAAR,GAAQA,QAASC,GAAjB,GAAiBA,QAASC,GAA1B,GAA0BA,QAClBC,GAAeC,cAAfD,WAER,GAAyBE,mBACvB,iBAAM,CAACC,YAAgBX,GAAWM,IAAUK,YAAgBR,GAAWG,OACvE,CAACN,GAAWG,GAAWG,KAFzB,qBAAOM,GAAP,MAAeC,GAAf,MAKQC,GAAMC,cAAND,EAGR,GAAyCE,cAAjCC,GAAR,GAAQA,iBAAkBC,GAA1B,GAA0BA,WAC1B,GAAuCC,YAAkB,OAACnB,SAAD,IAACA,WAAaE,EAAd,OAAyBC,SAAzB,IAAyBA,WAAaD,GAAvFkB,GAAR,GAAQA,KAAMC,GAAd,GAAcA,cAAeC,GAA7B,GAA6BA,MACRC,GAAiBC,cAA9BC,YACFC,IAAWJ,GAGjB,GAAwCK,oBAAkB,GAA1D,qBAAOC,GAAP,MAAqBC,GAArB,MACA,GAA0CF,oBAAS,GAAnD,qBAAOG,GAAP,MAAsBC,GAAtB,MAGA,GAA4BJ,mBAAiB,IAA7C,qBAAOK,GAAP,MAAeC,GAAf,MACMC,GAAWC,cACjB,GAA0BC,cAAnBC,GAAP,qBAEMC,IAAgB,mBACnBC,IAAMC,kBAAoBnB,GAAckB,IAAMC,mBAAmBC,QAAQ,KACtE,IACApB,GAAckB,IAAMC,mBAAmBE,SAAS,IAAIC,IAAQ,IAAK,QACjE,KACAtB,GAAckB,IAAMC,mBAAmBI,QAAQ,IAL/B,cAMnBL,IAAMM,UACL5B,KAAqBsB,IAAMM,UAAY3B,GAAvC,oBAAoDG,GAAckB,IAAMM,kBAAxE,aAAoD,EAAgCC,cAAc,UAAlG,QAAwG,IAPtF,cAQnBP,IAAMQ,WACL9B,KAAqBsB,IAAMQ,WAAa7B,GAAxC,oBAAqDG,GAAckB,IAAMQ,mBAAzE,aAAqD,EAAiCD,cAAc,UAApG,QAA0G,IATxF,cAUnBP,IAAMS,WACL/B,KAAqBsB,IAAMS,WAAa9B,GAAxC,oBAAqDG,GAAckB,IAAMS,mBAAzE,aAAqD,EAAiCF,cAAc,UAApG,QAA0G,IAXxF,GAchBG,GAAW,UAAG5B,GAAckB,IAAMC,0BAAvB,aAAG,EAAwCC,QAAQ,IAAIE,IAAQ,MAG1EO,GAAgCC,YAAe,OAAC/B,SAAD,IAACA,IAAD,UAACA,GAAMgC,sBAAP,aAAC,EAAsBC,SAEtEC,GAAgBC,cAGtB,GAA0C5B,mBAAuE,MAAjH,qBAAO6B,GAAP,MAAsBC,GAAtB,MACA,GAAoCC,YAAmBrC,GAAckB,IAAMM,WAAYS,IAAvF,qBAAOK,GAAP,MAAiBC,GAAjB,MAlDoE,8CAoDpE,wCAAAC,EAAA,yDACOX,IAAiB9B,IAASb,IAAY2B,GAD7C,sBAC6D,IAAI4B,MAAM,wBADvE,UAEQC,EAAkB1C,GAAckB,IAAMM,WAF9C,sBAG8B,IAAIiB,MAAM,4BAHxC,uBAMsBZ,GAAac,OAAO3D,IAN1C,OAMQ4D,EANR,OAQQC,EAAe,CACnB,CAAEC,KAAM,OAAQC,KAAM,UACtB,CAAED,KAAM,UAAWC,KAAM,UACzB,CAAED,KAAM,UAAWC,KAAM,WACzB,CAAED,KAAM,oBAAqBC,KAAM,YAE/BC,EAAS,CACbF,KAAM,cACNG,QAAS,IACThE,WACAiE,kBAAmBnD,GAAKgC,eAAeC,SAEnCmB,EAAS,CACb,CAAEL,KAAM,QAASC,KAAM,WACvB,CAAED,KAAM,UAAWC,KAAM,WACzB,CAAED,KAAM,QAASC,KAAM,WACvB,CAAED,KAAM,QAASC,KAAM,WACvB,CAAED,KAAM,WAAYC,KAAM,YAEtBK,EAAU,CACdC,MAAOrE,GACPsE,QAASrB,GACTsB,MAAOb,EAAgBc,IAAIC,WAC3Bb,MAAOA,EAAMc,cACb7C,SAAUA,GAAS8C,YAEfC,EAAOC,KAAKC,UAAU,CAC1BC,MAAO,CACLlB,eACAM,UAEFH,SACAgB,YAAa,SACbZ,YAGFlE,GACG+E,KAAK,uBAAwB,CAACjF,GAAS4E,IACvCM,KAAKC,kBACLD,MAAK,SAACE,GACLhC,GAAiB,CACfiC,EAAGD,EAAUC,EACbC,EAAGF,EAAUE,EACbC,EAAGH,EAAUG,EACb1D,SAAUA,GAAS8C,gBAGtBa,OAAM,SAACC,GAEY,QAAX,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKC,OACPnC,QA1DR,6CApDoE,sBAoHpE,IAAMnC,GAAcuE,uBAClB,SAACC,EAAcrB,GAEb,OADAnB,GAAiB,MACVlC,GAAa0E,EAAOrB,KAE7B,CAACrD,KAGG2E,GAAmBF,uBAAY,SAACpB,GAAD,OAAyBnD,GAAYc,IAAMM,UAAW+B,KAAQ,CAACnD,KAC9F0E,GAAmBH,uBAAY,SAACpB,GAAD,OAAyBnD,GAAYc,IAAMQ,WAAY6B,KAAQ,CAACnD,KAC/F2E,GAAmBJ,uBAAY,SAACpB,GAAD,OAAyBnD,GAAYc,IAAMS,WAAY4B,KAAQ,CAACnD,KAG/F4E,GAAiBC,cAjI6C,SAkIrDC,KAlIqD,8EAkIpE,sDAAA1C,EAAA,yDACOrD,IAAeF,IAAYC,IAAYF,IAAY6B,GAD1D,sBAC0E,IAAI4B,MAAM,wBADpF,UAE8B0C,EAAyDnF,GAA5EkB,IAAMQ,YAAkD0D,EAAoBpF,GAAvCkB,IAAMS,YAC/CwD,GAAoBC,EAH3B,sBAIU,IAAI3C,MAAM,4BAJpB,UAMQ4C,EAASC,YAAkBnG,GAAYF,GAASC,GAASF,IANjE,mBASKkC,IAAMQ,WAAa6D,YAAwBJ,EAAiBnE,IAAiB,IATlF,cAUKE,IAAMS,WAAa4D,YAAwBH,EAAiBpE,IAAiB,IAF1EwE,EARR,EAaO7G,IAAcG,GAbrB,sBAasC,IAAI2D,MAAM,kBAbhD,UAcQC,EAAkB1C,GAAckB,IAAMM,WAd9C,uBAe8B,IAAIiB,MAAM,4BAfxC,WAiBQgD,EAAiB3G,KAAc4G,IAC/BC,EAAmBhH,KAAc+G,KAASD,EAE3ClG,IAAWC,GApBlB,uBAoBgC,IAAIiD,MAAM,kBApB1C,WAyBMH,KAAasD,IAAcC,SAzBjC,iBA2BQF,GACFG,EAAc,CAAC,qBAAsB,mDACrCC,EAAO,CACLN,EAAiBlG,GAAOyC,QAAUxC,GAAOwC,QACzCU,EAAgBc,IAAIC,WACpB+B,EAAWC,EAAiBvE,IAAMQ,WAAaR,IAAMS,YAAY8B,WACjE+B,EAAWC,EAAiBvE,IAAMS,WAAaT,IAAMQ,YAAY+B,WACjEzE,GACA6B,GAAS6C,iBAKXoC,EAAc,CAAC,mBACfC,EAAO,CACLxG,GAAOyC,QACPxC,GAAOwC,QACPU,EAAgBc,IAAIC,WACpB+B,EAAWtE,IAAMQ,YAAY+B,WAC7B+B,EAAWtE,IAAMS,YAAY8B,WAC7BzE,GACA6B,GAAS6C,gBAhDjB,2BAqD6B,OAAlBvB,GArDX,iBAuDQwD,GACFG,EAAc,CAAC,+BAAgC,6DAC/CC,EAAO,CACLN,EAAiBlG,GAAOyC,QAAUxC,GAAOwC,QACzCU,EAAgBc,IAAIC,WACpB+B,EAAWC,EAAiBvE,IAAMQ,WAAaR,IAAMS,YAAY8B,WACjE+B,EAAWC,EAAiBvE,IAAMS,WAAaT,IAAMQ,YAAY+B,WACjEzE,GACAmD,GAActB,UACd,EACAsB,GAAckC,EACdlC,GAAcmC,EACdnC,GAAcoC,KAKhBuB,EAAc,CAAC,6BACfC,EAAO,CACLxG,GAAOyC,QACPxC,GAAOwC,QACPU,EAAgBc,IAAIC,WACpB+B,EAAWtE,IAAMQ,YAAY+B,WAC7B+B,EAAWtE,IAAMS,YAAY8B,WAC7BzE,GACAmD,GAActB,UACd,EACAsB,GAAckC,EACdlC,GAAcmC,EACdnC,GAAcoC,IApFtB,8BAwFU,IAAI9B,MAAM,kFAxFpB,yBA2F4DuD,QAAQC,IAChEH,EAAYI,KAAI,SAACC,GAAD,aACd,EAAAd,EAAOe,aAAYD,GAAnB,oBAAkCJ,IAC/B7B,KAAKmC,KACL7B,OAAM,SAACC,GACN6B,QAAQrG,MAAR,qBAAoCkG,EAAYJ,EAAMtB,UAhGhE,WA2FQ8B,EA3FR,QA2GuC,KAL/BC,EAA8BD,EAAiBE,WAAU,SAACC,GAAD,OAC7DC,IAAUC,YAAYF,OAvG1B,iBA4GIJ,QAAQrG,MAAM,wDA5GlB,+BA8GUkG,EAAaL,EAAYU,GACzBE,EAAkBH,EAAiBC,GAEzC9F,IAAiB,GAjHrB,UAkHU2E,EAAOc,GAAP,MAAAd,EAAM,YAAgBU,GAAhB,QAAsB,CAChCc,SAAUH,MAETxC,MAAK,SAAC4C,GAAmC,IAAD,IACvCpG,IAAiB,GAEjBsE,GAAe8B,EAAU,CACvBC,QAAQ,UAAD,iBAAY/G,GAAckB,IAAMQ,mBAAhC,aAAY,EAAiCD,cAAc,GAA3D,mBACL9C,SADK,IACLA,QADK,EACLA,GAAWqI,OADN,0BAEChH,GAAckB,IAAMS,mBAFrB,aAEC,EAAiCF,cAAc,GAFhD,mBAEsD3C,SAFtD,IAEsDA,QAFtD,EAEsDA,GAAWkI,UAG1EpG,GAAUkG,EAASG,SAEpBzC,OAAM,SAACC,GACN/D,IAAiB,GAEjB4F,QAAQrG,MAAMwE,MAnItB,6CAlIoE,sBA0QpE,SAASyC,KAAe,IAAD,IACrB,OACE,eAAC,IAAD,CAAYC,IAAI,KAAhB,UACE,eAAC,IAAD,CAAYC,MAAM,WAAlB,UACE,cAAC,KAAD,CAAMC,SAAS,OAAf,mBAAuBrH,GAAckB,IAAMQ,mBAA3C,aAAuB,EAAiCD,cAAc,KACtE,eAAC,IAAD,CAAU0F,IAAI,MAAd,UACE,cAAC,IAAD,CAAcG,SAAU3I,GAAW4I,KAAK,SACxC,cAAC,KAAD,CAAMF,SAAS,OAAOG,GAAG,OAAzB,gBACG7I,SADH,IACGA,QADH,EACGA,GAAWqI,eAIlB,cAAC,IAAD,UACE,cAAC,IAAD,CAASS,MAAM,WAEjB,eAAC,IAAD,CAAYL,MAAM,WAAlB,UACE,cAAC,KAAD,CAAMC,SAAS,OAAf,mBAAuBrH,GAAckB,IAAMS,mBAA3C,aAAuB,EAAiCF,cAAc,KACtE,eAAC,IAAD,CAAU0F,IAAI,MAAd,UACE,cAAC,IAAD,CAAcG,SAAUxI,GAAWyI,KAAK,SACxC,cAAC,KAAD,CAAMF,SAAS,OAAOG,GAAG,OAAzB,gBACG1I,SADH,IACGA,QADH,EACGA,GAAWkI,eAKlB,cAAC,KAAD,CAAMU,OAAK,EAACC,UAAU,OAAOC,GAAG,OAAhC,SACGnI,GAAE,mGAAoG,CACrGoI,SAAU7G,GAAkB,WAOtC,SAAS8G,KAAe,IAAD,MACrB,OACE,qCACE,eAAC,IAAD,WACE,cAAC,KAAD,UACGrI,GAAE,2BAA4B,CAAEsI,OAAM,iBAAEpJ,SAAF,IAAEA,QAAF,EAAEA,GAAWqI,cAAb,QAAuB,GAAIgB,OAAM,iBAAElJ,SAAF,IAAEA,QAAF,EAAEA,GAAWkI,cAAb,QAAuB,OAEjG,eAAC,IAAD,WACE,cAAC,IAAD,CAAoBiB,UAAWtJ,GAAWuJ,UAAWpJ,GAAWqJ,QAAM,IACtE,cAAC,KAAD,oBAAOnI,GAAckB,IAAMM,kBAA3B,aAAO,EAAgCC,cAAc,WAGxD1B,IACC,qCACE,eAAC,IAAD,WACE,cAAC,KAAD,UAAON,GAAE,WACT,eAAC,KAAD,uBACKd,SADL,IACKA,QADL,EACKA,GAAWqI,OADhB,MAC2BzH,GAASQ,GAAKqI,QAAQ7I,IAAQkC,cAAc,GAAK,IAD5E,WACkF3C,SADlF,IACkFA,QADlF,EACkFA,GAAWkI,aAG/F,eAAC,IAAD,WACE,wBACA,eAAC,KAAD,uBACKlI,SADL,IACKA,QADL,EACKA,GAAWkI,OADhB,MAC2BxH,GAASO,GAAKqI,QAAQ5I,IAAQiC,cAAc,GAAK,IAD5E,WACkF9C,SADlF,IACkFA,QADlF,EACkFA,GAAWqI,gBAKnG,cAAC,IAAD,CAAQqB,WAAY/F,KAAasD,IAAcC,UAA8B,OAAlB1D,IAAyBmG,QAASpD,GAA7F,SACGzF,GAAE,gBAMX,IAAM8I,GAAc9I,GAAE,uDAAwD,CAC5E+I,QAAO,oBAAExI,GAAckB,IAAMQ,mBAAtB,aAAE,EAAiCD,cAAc,UAAjD,QAAuD,GAC9DgH,QAAO,iBAAE9J,SAAF,IAAEA,QAAF,EAAEA,GAAWqI,cAAb,QAAuB,GAC9B0B,QAAO,sBAAE1I,GAAckB,IAAMS,mBAAtB,cAAE,GAAiCF,cAAc,UAAjD,UAAuD,GAC9DkH,QAAO,kBAAE7J,SAAF,IAAEA,QAAF,EAAEA,GAAWkI,cAAb,UAAuB,KAG1B4B,GAAiCjE,uBACrC,SAACpB,GACCnD,GAAYc,IAAMC,kBAAmBoC,EAAME,cAE7C,CAACrD,KAGGuF,GAAmBhH,KAAc+G,KAAS5G,KAAc4G,IACxDmD,GAAoBC,QACxB7J,KACIN,IAAaoK,YAAeC,IAAK/J,IAAUN,KAC1CG,IAAaiK,YAAeC,IAAK/J,IAAUH,MAG5CmK,GAAwBtE,uBAC5B,SAAC2C,GACK5I,IAAewK,YAAW5B,KAAc5I,GAC1CJ,GAAQ6K,KAAR,kBAAwBD,YAAW5B,GAAnC,YAAgD7I,KAEhDH,GAAQ6K,KAAR,kBAAwBD,YAAW5B,GAAnC,YAAgD5I,OAGpD,CAACD,GAAaC,GAAaJ,KAEvB8K,GAAwBzE,uBAC5B,SAAC2C,GACK7I,IAAeyK,YAAW5B,KAAc7I,GAC1CH,GAAQ6K,KAAR,kBAAwBzK,GAAxB,YAAuCwK,YAAW5B,KAElDhJ,GAAQ6K,KAAR,kBAAwB1K,GAAxB,YAAuCyK,YAAW5B,OAGtD,CAAC7I,GAAaC,GAAaJ,KAGvB+K,GAA4B1E,uBAAY,WAC5CvC,GAAiB,MAEbzB,IACFP,GAAYc,IAAMC,kBAAmB,KAEvCP,GAAU,MACT,CAACR,GAAaO,KAEjB,GAAgE2I,YAC9DC,OAAOC,SAASxJ,GAAckB,IAAMC,mBAAmBI,QAAQ,IAC/DqH,IAFF,qBAAOa,GAAP,MAAiCC,GAAjC,MAKA,GAAmCC,aACjC,cAAC,IAAD,CACEC,MAAOnK,GAAE,oBACToK,gBAAiBR,GACjB5I,cAAeA,GACfwG,KAAMtG,IAAU,GAChBmJ,QAAS,kBAAM,cAAC,IAAD,CAA0BC,WAAY7C,GAAa8C,cAAelC,MACjFS,YAAaA,MAEf,GACA,EACA,wBAXK0B,GAAP,qBAcA,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,OAAO,YACPN,MAAOnK,GAAE,qCAAsC,CAC7CsI,OAAM,kBAAEpJ,SAAF,IAAEA,QAAF,EAAEA,GAAWqI,cAAb,UAAuB,GAC7BgB,OAAM,kBAAElJ,SAAF,IAAEA,QAAF,EAAEA,GAAWkI,cAAb,UAAuB,KAE/BmD,SAAQ,4BAAgBxL,SAAhB,IAAgBA,QAAhB,EAAgBA,GAAWqI,OAA3B,uBAAyClI,SAAzC,IAAyCA,QAAzC,EAAyCA,GAAWkI,QAC5DoD,UAAQ,IAGV,eAAC,IAAD,WACE,eAAC,IAAD,CAAYjD,IAAI,OAAhB,UACE,eAAC,IAAD,WACE,cAAC,KAAD,UAAO1H,GAAE,YACT,cAAC,IAAD,CAAQ4K,QAAQ,OAAOC,MAAM,KAAKhC,QAAS,kBAAM9H,IAAiBD,KAAlE,SACkBd,GAAfc,GAAiB,SAAc,kBAGlCA,IACA,eAACxC,EAAD,WACE,eAAC,KAAD,CAAMsJ,SAAS,OAAOkD,MAAI,EAACC,GAAG,OAAOC,MAAO,CAAEC,WAAY,GAA1D,UACGzJ,GAAiBC,IAAMC,mBAD1B,OAGA,cAAC,KAAD,CACE2B,KAAK,YACL6H,IAAK,EACLC,IAAK,IACLrH,MAAOkG,GACPoB,eAAgB,SAACtH,GAAD,OAAWmG,GAA4BoB,KAAKC,KAAKxH,KACjEiH,GAAG,SAEL,eAAC,IAAD,CAAMQ,SAAS,OAAOC,eAAe,eAArC,UACE,cAAC,IAAD,CAAQZ,QAAQ,WAAWC,MAAM,KAAKhC,QAAS,kBAAMlI,GAAYc,IAAMC,kBAAmB,OAA1F,iBAGA,cAAC,IAAD,CAAQkJ,QAAQ,WAAWC,MAAM,KAAKhC,QAAS,kBAAMlI,GAAYc,IAAMC,kBAAmB,OAA1F,iBAGA,cAAC,IAAD,CAAQkJ,QAAQ,WAAWC,MAAM,KAAKhC,QAAS,kBAAMlI,GAAYc,IAAMC,kBAAmB,OAA1F,iBAGA,cAAC,IAAD,CAAQkJ,QAAQ,WAAWC,MAAM,KAAKhC,QAAS,kBAAMlI,GAAYc,IAAMC,kBAAmB,QAA1F,2BAONZ,IACA,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAe2K,MAAM,aAAazD,MAAM,OAAO0D,GAAG,WAEpD,eAAC,IAAD,CAAYhE,IAAI,OAAhB,UACE,cAAC,KAAD,CAAMoD,MAAI,EAACW,MAAM,YAAY7D,SAAS,OAAO+D,cAAc,YAA3D,SACG3L,GAAE,sBAEL,eAAC,IAAD,WACE,eAAC,IAAD,CAAMwL,eAAe,gBAAgBT,GAAG,MAAxC,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAclD,SAAU3I,KACxB,cAAC,KAAD,CAAM+I,OAAK,EAACwD,MAAM,aAAaG,GAAG,iCAAiC7D,GAAG,MAAtE,gBACG7I,SADH,IACGA,QADH,EACGA,GAAWqI,YAGhB,cAAC,KAAD,CAAMU,OAAK,EAAX,SAAazG,GAAiBC,IAAMQ,aAAe,SAErD,eAAC,IAAD,CAAMuJ,eAAe,gBAArB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAc3D,SAAUxI,KACxB,cAAC,KAAD,CAAM4I,OAAK,EAACwD,MAAM,aAAaG,GAAG,iCAAiC7D,GAAG,MAAtE,gBACG1I,SADH,IACGA,QADH,EACGA,GAAWkI,YAGhB,cAAC,KAAD,CAAMU,OAAK,EAAX,SAAazG,GAAiBC,IAAMS,aAAe,SAEpD1C,KAAY4J,IAAqBlD,IAChC,cAAC,IAAD,CAAY8E,MAAO,CAAEQ,eAAgB,WAAY5D,SAAU,QAA3D,SACG1B,GACC,cAAC,IAAD,CACE2F,GAAE,kBAAa3M,KAAc+G,IAAQsD,IAAK/J,IAAS+C,QAAUvD,GAA3D,YACAK,KAAc4G,IAAQsD,IAAK/J,IAAS+C,QAAUtD,IAFlD,SAKGe,GAAE,kBAEHoJ,GACF,cAAC,IAAD,CACEyC,GAAE,kBAAa3M,IAAaoK,YAAepK,GAAWqK,IAAK/J,KAAY,MAAQR,GAA7E,YACAK,IAAaiK,YAAejK,GAAWkK,IAAK/J,KAAY,MAAQP,IAFpE,SAKGe,GAAE,iBAEH,OAEJ,cAMXc,IACC,eAAC,IAAD,CAAK4K,GAAG,OAAR,UACE,cAAC,IAAD,CACE5H,MAAOtC,GAAiBC,IAAMM,WAC9BpB,YAAayE,GACb0G,MAAO,WACLnL,GAAYc,IAAMC,kBAAmB,QAEvCqK,eAAgB5J,GAChB6J,uBAAqB,EACrBnE,SAAQ,OAAEvH,SAAF,IAAEA,QAAF,EAAEA,GAAMgC,eAChBhC,KAAMA,GACNsL,GAAG,mBACHK,iBAAkB,kBAAM,QAE1B,cAAC,IAAD,UACE,cAAC,IAAD,CAAejE,MAAM,OAAO0D,GAAG,WAEjC,cAAC,IAAD,CACEQ,aAAW,EACXpI,MAAOtC,GAAiBC,IAAMQ,YAC9BtB,YAAa0E,GACbyG,MAAO,kBAAMnL,GAAYc,IAAMC,kBAAmB,QAClDqK,eAAgB5J,GAChB0F,SAAU3I,GACViN,MAAOnM,GAAE,UACTiM,iBAAkBzC,GAClBoC,GAAG,4BAEL,cAAC,IAAD,UACE,cAAC,IAAD,CAAS5D,MAAM,OAAO0D,GAAG,WAE3B,cAAC,IAAD,CACEQ,aAAW,EACXpI,MAAOtC,GAAiBC,IAAMS,YAC9BvB,YAAa2E,GACbwG,MAAO,kBAAMnL,GAAYc,IAAMC,kBAAmB,QAClDqK,eAAgB5J,GAChB0F,SAAUxI,GACV8M,MAAOnM,GAAE,UACTiM,iBAAkBtC,GAClBiC,GAAG,+BAIRtL,IACC,eAAC,IAAD,CAAYoH,IAAI,OAAOsD,MAAO,CAAEoB,UAAW,QAA3C,UACE,cAAC,KAAD,CAAMtB,MAAI,EAACW,MAAM,YAAY7D,SAAS,OAAO+D,cAAc,YAA3D,SACG3L,GAAE,YAEL,eAAC,IAAD,WACE,eAAC,IAAD,CAAMwL,eAAe,gBAArB,UACE,eAAC,KAAD,CAAMvD,OAAK,EAACwD,MAAM,aAAlB,sBACKvM,SADL,IACKA,QADL,EACKA,GAAWqI,OADhB,QAGA,eAAC,KAAD,CAAMU,OAAK,EAAX,UACGnI,GAASQ,GAAKqI,QAAQ7I,IAAQkC,cAAc,GAAK,IADpD,WAC0D3C,SAD1D,IAC0DA,QAD1D,EAC0DA,GAAWkI,aAGvE,eAAC,IAAD,CAAMiE,eAAe,gBAArB,UACE,eAAC,KAAD,CAAMvD,OAAK,EAACwD,MAAM,aAAlB,sBACKpM,SADL,IACKA,QADL,EACKA,GAAWkI,OADhB,QAGA,eAAC,KAAD,CAAMU,OAAK,EAAX,UACGlI,GAASO,GAAKqI,QAAQ5I,IAAQiC,cAAc,GAAK,IADpD,WAC0D9C,SAD1D,IAC0DA,QAD1D,EAC0DA,GAAWqI,mBAM7E,cAAC,IAAD,CAAK8E,SAAS,WAAWC,GAAG,OAA5B,SACI/M,GAGA,eAAC,IAAD,WACE,cAAC,IAAD,CACEqL,QAAS/H,KAAasD,IAAcC,UAA8B,OAAlB1D,GAAyB,UAAY,UACrFmG,QA3kBoD,4CA4kBpDD,SAAU/F,KAAasD,IAAcoG,cAAkC,OAAlB7J,GACrDsF,MAAM,OACNwE,GAAG,SALL,SAOG3J,KAAasD,IAAcsG,QAC1B,cAAC,IAAD,UAAOzM,GAAE,cACP6C,KAAasD,IAAcC,UAA8B,OAAlB1D,GACzC1C,GAAE,WAEFA,GAAE,YAGN,cAAC,IAAD,CACE4K,SACGhK,IAAaL,GAAckB,IAAMQ,aAAiB1B,GAAckB,IAAMS,YACnE,SACA,UAEN2G,QAAS,WACP2B,MAEFxC,MAAM,OACNY,UAAWhI,IAA8B,OAAlB8B,IAA0BG,KAAasD,IAAcC,SAV9E,SAYG5F,IAASR,GAAE,eA9BhB,cAAC,IAAD,YAsCPM,GACC,cAAC,IAAD,CAAY0K,MAAO,CAAE0B,SAAU,QAAS1E,MAAO,OAAQ2E,SAAU,QAASP,UAAW,QAArF,SACE,cAAC,IAAD,CAAqBQ,cAAexD,GAAmB9I,KAAMA,OAE7D","file":"static/js/11.45baa2d3.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { splitSignature } from '@ethersproject/bytes'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from '@pancakeswap/sdk'\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from '@pancakeswap/uikit'\nimport { RouteComponentProps } from 'react-router'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { useTranslation } from 'contexts/Localization'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\nimport { LightGreyCard } from '../../components/Card'\n\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo'\n// import { ROUTER_ADDRESS, PANCAKE_ROUTER_ADDRESS } from '../../config/constants'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { usePairContract, useRouterAddress } from '../../hooks/useContract'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\n\nimport { useSetRouterType } from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport StyledInternalLink from '../../components/Links'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { currencyId } from '../../utils/currencyId'\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\nimport Dots from '../../components/Loader/Dots'\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\n\nimport { Field } from '../../state/burn/actions'\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\nimport Page from '../Page'\n\nconst BorderCard = styled.div`\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n  padding: 16px;\n`\n\nexport default function RemoveLiquidity({\n  history,\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\n  const { account, chainId, library } = useActiveWeb3React()\n  const { routerType } = useSetRouterType()\n\n  const [tokenA, tokenB] = useMemo(\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\n    [currencyA, currencyB, chainId],\n  )\n\n  const { t } = useTranslation()\n\n  // burn state\n  const { independentField, typedValue } = useBurnState()\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\n  const isValid = !error\n\n  // modal and loading\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\n\n  // txn values\n  const [txHash, setTxHash] = useState<string>('')\n  const deadline = useTransactionDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const formattedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\n      ? '0'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\n      ? '<1'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\n    [Field.LIQUIDITY]:\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_A]:\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_B]:\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n  }\n\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\n\n  // pair contract\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\n\n  const routerAddress = useRouterAddress()\n\n  // allowance handling\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], routerAddress)\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    // try to gather a signature for permission\n    const nonce = await pairContract.nonces(account)\n\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n    ]\n    const domain = {\n      name: 'Pancake LPs',\n      version: '1',\n      chainId,\n      verifyingContract: pair.liquidityToken.address,\n    }\n    const Permit = [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ]\n    const message = {\n      owner: account,\n      spender: routerAddress,\n      value: liquidityAmount.raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadline.toNumber(),\n    }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit,\n      },\n      domain,\n      primaryType: 'Permit',\n      message,\n    })\n\n    library\n      .send('eth_signTypedData_v4', [account, data])\n      .then(splitSignature)\n      .then((signature) => {\n        setSignatureData({\n          v: signature.v,\n          r: signature.r,\n          s: signature.s,\n          deadline: deadline.toNumber(),\n        })\n      })\n      .catch((err) => {\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n        if (err?.code !== 4001) {\n          approveCallback()\n        }\n      })\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback(\n    (field: Field, value: string) => {\n      setSignatureData(null)\n      return _onUserInput(field, value)\n    },\n    [_onUserInput],\n  )\n\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\n\n  // tx sending\n  const addTransaction = useTransactionAdder()\n  async function onRemove() {\n    if (!routerType || !chainId || !library || !account || !deadline) throw new Error('missing dependencies')\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\n    if (!currencyAmountA || !currencyAmountB) {\n      throw new Error('missing currency amounts')\n    }\n    const router = getRouterContract(routerType, chainId, library, account)\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\n    }\n\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    const currencyBIsETH = currencyB === ETHER\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\n\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\n\n    let methodNames: string[]\n    let args: Array<string | string[] | number | boolean>\n    // we have approval, use normal remove liquidity\n    if (approval === ApprovalState.APPROVED) {\n      // removeLiquidityETH\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n      // removeLiquidity\n      else {\n        methodNames = ['removeLiquidity']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n    }\n    // we have a signataure, use permit versions of remove liquidity\n    else if (signatureData !== null) {\n      // removeLiquidityETHWithPermit\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n      // removeLiquidityETHWithPermit\n      else {\n        methodNames = ['removeLiquidityWithPermit']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n    } else {\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\n    }\n\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\n      methodNames.map((methodName) =>\n        router.estimateGas[methodName](...args)\n          .then(calculateGasMargin)\n          .catch((err) => {\n            console.error(`estimateGas failed`, methodName, args, err)\n            return undefined\n          }),\n      ),\n    )\n\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\n      BigNumber.isBigNumber(safeGasEstimate),\n    )\n\n    // all estimations failed...\n    if (indexOfSuccessfulEstimation === -1) {\n      console.error('This transaction would fail. Please contact support.')\n    } else {\n      const methodName = methodNames[indexOfSuccessfulEstimation]\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\n\n      setAttemptingTxn(true)\n      await router[methodName](...args, {\n        gasLimit: safeGasEstimate,\n      })\n        .then((response: TransactionResponse) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencyA?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        })\n        .catch((err: Error) => {\n          setAttemptingTxn(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          console.error(err)\n        })\n    }\n  }\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\">\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\">\n              {currencyA?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowFixed>\n          <AddIcon width=\"16px\" />\n        </RowFixed>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\">\n              {currencyB?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n\n        <Text small textAlign=\"left\" pt=\"12px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  function modalBottom() {\n    return (\n      <>\n        <RowBetween>\n          <Text>\n            {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\n          </Text>\n          <RowFixed>\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\n          </RowFixed>\n        </RowBetween>\n        {pair && (\n          <>\n            <RowBetween>\n              <Text>{t('Price')}</Text>\n              <Text>\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n              </Text>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <Text>\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n              </Text>\n            </RowBetween>\n          </>\n        )}\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\n          {t('Confirm')}\n        </Button>\n      </>\n    )\n  }\n\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencyA?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencyB?.symbol ?? '',\n  })\n\n  const liquidityPercentChangeCallback = useCallback(\n    (value: number) => {\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\n    },\n    [onUserInput],\n  )\n\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\n  )\n\n  const handleSelectCurrencyA = useCallback(\n    (currency: Currency) => {\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\n      } else {\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n  const handleSelectCurrencyB = useCallback(\n    (currency: Currency) => {\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\n      } else {\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\n    }\n    setTxHash('')\n  }, [onUserInput, txHash])\n\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\n    liquidityPercentChangeCallback,\n  )\n\n  const [onPresentRemoveLiquidity] = useModal(\n    <TransactionConfirmationModal\n      title={t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash || ''}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n    />,\n    true,\n    true,\n    'removeLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          backTo=\"liquidity\"\n          title={t('Remove %assetA%-%assetB% liquidity', {\n            assetA: currencyA?.symbol ?? '',\n            assetB: currencyB?.symbol ?? '',\n          })}\n          subtitle={`To receive ${currencyA?.symbol} and ${currencyB?.symbol}`}\n          noConfig\n        />\n\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            <RowBetween>\n              <Text>{t('Amount')}</Text>\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\n                {showDetailed ? t('Simple') : t('Detailed')}\n              </Button>\n            </RowBetween>\n            {!showDetailed && (\n              <BorderCard>\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\n                </Text>\n                <Slider\n                  name=\"lp-amount\"\n                  min={0}\n                  max={100}\n                  value={innerLiquidityPercentage}\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\n                  mb=\"16px\"\n                />\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\n                    25%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\n                    50%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\n                    75%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\n                    Max\n                  </Button>\n                </Flex>\n              </BorderCard>\n            )}\n          </AutoColumn>\n          {!showDetailed && (\n            <>\n              <ColumnCenter>\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <AutoColumn gap=\"10px\">\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                  {t('You will receive')}\n                </Text>\n                <LightGreyCard>\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyA} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\n                        {currencyA?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\n                  </Flex>\n                  <Flex justifyContent=\"space-between\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyB} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\n                        {currencyB?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\n                  </Flex>\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\n                      {oneCurrencyIsETH ? (\n                        <StyledInternalLink\n                          to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\n                          }`}\n                        >\n                          {t('Receive WBNB')}\n                        </StyledInternalLink>\n                      ) : oneCurrencyIsWETH ? (\n                        <StyledInternalLink\n                          to={`/remove/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\n                          }`}\n                        >\n                          {t('Receive BNB')}\n                        </StyledInternalLink>\n                      ) : null}\n                    </RowBetween>\n                  ) : null}\n                </LightGreyCard>\n              </AutoColumn>\n            </>\n          )}\n\n          {showDetailed && (\n            <Box my=\"16px\">\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.LIQUIDITY]}\n                onUserInput={onLiquidityInput}\n                onMax={() => {\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\n                }}\n                showMaxButton={!atMaxAmount}\n                disableCurrencySelect\n                currency={pair?.liquidityToken}\n                pair={pair}\n                id=\"liquidity-amount\"\n                onCurrencySelect={() => null}\n              />\n              <ColumnCenter>\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_A]}\n                onUserInput={onCurrencyAInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyA}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyA}\n                id=\"remove-liquidity-tokena\"\n              />\n              <ColumnCenter>\n                <AddIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_B]}\n                onUserInput={onCurrencyBInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyB}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyB}\n                id=\"remove-liquidity-tokenb\"\n              />\n            </Box>\n          )}\n          {pair && (\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                {t('Prices')}\n              </Text>\n              <LightGreyCard>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyA?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n                  </Text>\n                </Flex>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyB?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n                  </Text>\n                </Flex>\n              </LightGreyCard>\n            </AutoColumn>\n          )}\n          <Box position=\"relative\" mt=\"16px\">\n            {!account ? (\n              <ConnectWalletButton />\n            ) : (\n              <RowBetween>\n                <Button\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\n                  onClick={onAttemptToApprove}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n                  width=\"100%\"\n                  mr=\"0.5rem\"\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>{t('Enabling')}</Dots>\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                    t('Enabled')\n                  ) : (\n                    t('Enable')\n                  )}\n                </Button>\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    onPresentRemoveLiquidity()\n                  }}\n                  width=\"100%\"\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\n                >\n                  {error || t('Remove')}\n                </Button>\n              </RowBetween>\n            )}\n          </Box>\n        </CardBody>\n      </AppBody>\n\n      {pair ? (\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </Page>\n  )\n}\n"],"sourceRoot":""}